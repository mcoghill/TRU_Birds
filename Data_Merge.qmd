---
title: "Data_Merge"
author: "Matthew Coghill"
format: html
editor: visual
---

Steps to complete:

1.  Combine datasets and find redundancies.

2.  Decide whether to keep datasets separate and create an R script to combine?

3.  Need some way to identify source of data

4.  Simplify headings

5.  Remove extraneous data

These tasks will likely be carried out using data.table and tidyverse packages. First, load packages:

```{r, include=FALSE}

library(tidyverse)
library(janitor)
library(readxl)

```

Next, load in the datasets. For now, focus only on the ones that Matt put into the Dropbox folder.

HBW = handbook of the birds of the world
BEAC = Matt's Lab?


```{r}

# Start with AVONET
avonet <- read_excel("./data/AVONET Supplementary dataset 1.xlsx", sheet = "AVONET3_BirdTree", na = "NA") |> 
  rename_with(~gsub("3$", "", .x)) |> 
  clean_names() |> 
  rename_with(~ifelse(.x %in% c("species", "family", "order"), .x, 
                      paste0(.x, "_avo")))

# Next, "allbirdmorph"
# binomial_beac_x is equivalent to spcies from AVONET
# This dataset contains data from AVONET, remove those columns
# and other extraneous columns
allbirdmorph <- read.csv("./data/all bird morphometrics.csv") |> 
  clean_names() |> 
  select(-c(x, x_1, x_2, species, sisid, check_species_taxon,
            binomial_beac_y, family_english_hbw,
            family_english_beac, order_hbw, family_hbw,
            subfamily_hbw, tribe_hbw, long:isolation_index,
            n:species_status)) |> 
  rename(species = binomial_beac_x, 
         redlist_category_2020_hbw = x2020_iucn_red_list_category_hbw) |> 
  rename_with(~case_when(
    endsWith(.x, "beac") ~ .x,
    endsWith(.x, "hbw") ~ gsub("_hbw$", "_botw", .x),
    .x == "species" ~ .x,
    TRUE ~ paste0(.x, "_iucn")
  )) |> 
  mutate(redlist_category_2020_botw = case_when(
    redlist_category_2020_botw == "LC" ~ "Least Concern",
    redlist_category_2020_botw == "NT" ~ "Near Threatened",
    redlist_category_2020_botw == "VU" ~ "Vulnerable",
    redlist_category_2020_botw == "EN" ~ "Endangered",
    redlist_category_2020_botw == "CR" ~ "Critically Endangered",
    redlist_category_2020_botw == "EX" ~ "Extinct",
    redlist_category_2020_botw == "DD" ~ "Data Deficient",
    redlist_category_2020_botw == "EW" ~ "Extinct in the Wild",
    redlist_category_2020_botw == "CR (PE)" ~ "Critically Endangered (Possibly Extinct)",
    .default = NA),
    redlist_criteria_iucn = ifelse(
      redlist_criteria_iucn == "", NA, redlist_criteria_iucn))

# Next large dataset: Passeriformes.global.xlsx.
# This contains many columns with many morphometrics, but
# fewer rows than the allbirdmorph dataset. It also contains
# species not in AVONET likely for the following reasons (see
# the "name_change" column): extinct, new species/newly discovered,
# or not in birdtree.
passglob <- read_excel("./data/passeriformes.global.xlsx", na = "NA") |>
  clean_names() |> 
  select(-c(taxon_id_iucn_redlist, order_iucn_redlist, 
            family_name_iucn_redlist, number, name_change,
            habitat, natural_habitat_1,
            scientific_name_iucn_redlist, formerging, prebasic,
            feather_prebasic:breeding_territory_north_america,
            zoogeographical_zone:t_dichrom, e_prebasic:last_col(),
            habitat_north_america, habitat_binary)) |> 
  rename(nest_location = nesting,
         non_breeding_behaviour = social_system,
         mean_clutch_size = clutch_size,
         mean_number_of_broods = broods) |> 
  mutate(breeding_system = case_when(
    breeding_system == "SM" ~ "Monogamous",
    breeding_system == "SMPO" ~ "Polygynous",
    .default = breeding_system),
    non_breeding_behaviour = ifelse(
      non_breeding_behaviour == "social", "Gregarious",
      non_breeding_behaviour)) |> 
  rename_with(~case_when(
    endsWith(.x, "_birdlife_database") ~ gsub("_birdlife_database$", "_bldb", .x),
    endsWith(.x, "_et_al") ~ .x,
    endsWith(.x, "_iucn_redlist") ~ gsub("_iucn_redlist$", "_iucn", .x),
    endsWith(.x, "_allaboutbirds") ~ .x,
    endsWith(.x, "_cornell") ~ gsub("_cornell$", "_botw", .x),
    endsWith(.x, "_pyle2018") ~ .x,
    endsWith(.x, "2015") ~ .x,
    .x %in% c("species", "subspecies", "full_species") ~ .x,
    .x %in% c("winter_territorial", "mean_clutch_size",
              "mean_number_of_broods", "breeding_system",
              "non_breeding_behaviour", "nest_type", "nest_location",
              "behaviour",
              "diet_breadth", 
              "breeding_range") ~ paste0(.x, "_botw"),
    .default = paste0(.x, "_beac")
  ))

gran <- read_excel("./data/TRU_Database.xlsx", sheet = 1, na = "N/A") |> 
  clean_names() |> 
  select(-c(common_name, x28)) |> 
  mutate(non_breeding_behaviour = ifelse(
    non_breeding_behaviour == "Gregariouos", "Gregarious",
    non_breeding_behaviour)) |> 
  rename(winter_territorial = wintering_territoriality,
         species = scientific_name) |> 
  rename_with(~ifelse(.x == "species", .x, paste0(.x, "_botw"))) |>
  rename_with(~ifelse(startsWith(.x, "ave"), gsub("ave", "mean", .x), .x))
    

# Try smashing them together
join1 <- left_join(passglob, gran)

join2 <- left_join(allbirdmorph, join1, by = c(
  "species" = "species", "common_name_botw" = "common_name_s_iucn"))

all_data <- left_join(avonet, join2, by = "species") |> 
  select(sort(tidyselect::peek_vars())) |> 
  relocate(ends_with("_avo"), .before = 1) |> 
  relocate(ends_with("_iucn"), .after = length(ends_with("_avo"))) |>
  relocate(ends_with("_bldb"), .after = sum(
    length(ends_with("_avo")), length(ends_with("_iucn")))) |> 
  relocate(ends_with("_botw"), .after = sum(
    length(ends_with("_avo")), length(ends_with("_iucn")),
    length(ends_with("_bldb")))) |> 
  relocate(ends_with("_beac"), .after = sum(
    length(ends_with("_avo")), length(ends_with("_iucn")),
    length(ends_with("_bldb")), length(ends_with("_botw")))) |> 
  relocate(species, subspecies, full_species, family, order, 
           .before = 1)


# Now need to decide what to keep/get rid of!

```


Here is a list of columns requested:

-   Conservation status over time - IUCN Redlist category (allbirdmorph)

-   Things that threaten it

-   Habitat(s) of major importance - habitat, habitat_density (avonet)

-   Country - centroids (both?)

-   Population trend - allbirdmorph

-   Date of last assessment

-   Population severely fragmented? - islandfraction_hbw, isolation_index (allbirdmorph)

-   Continuing decline of mature individuals?

-   Habitat type (include all, in rank order)

-   Habitat classification, areas of major importance

-   Generation Length - generation_length_yrs_birdlife_database (passglob)

-   Movement patterns - migration (avonet)

-   Threats

-   Action recovery plan

Lets get these columns from as many of those data sources as possible.

```{r}

library(sf)
library(nngeo)
library(rnaturalearth)
library(rnaturalearthhires)

world <- ne_countries(scale = 10, type = "countries", returnclass = "sf") |> 
  select(name_en) |> 
  rename(country = name_en) |> 
  st_transform(3857) |> 
  st_make_valid()

# Get country from centroids
allbirdmorph2 <- allbirdmorph |> 
  select(species, islandfraction_hbw, isolation_index, land_status_beac,
         centroid_x, centroid_y, ext_min_x, ext_min_y, ext_max_x, ext_max_y,
         population_trend, x2020_iucn_red_list_category_hbw) |> 
  filter(!is.na(centroid_x)) |> 
  st_as_sf(coords = c("centroid_x", "centroid_y"), crs = 4326) |> 
  st_transform(3857)

allbirdmorph_countries <- allbirdmorph2 |> 
  st_intersection(world)

# There are some that didn't land on a country. Instead, get the "closest" country
# from those that didn't intersect with a boundary.
allbirdmorph_closest <- allbirdmorph2 |> 
  filter(!species %in% allbirdmorph_countries$species)

allbirdmorph_closest$country <- world[st_nearest_feature(allbirdmorph_closest, world), ]$country

# There are some that also don't have centroids:
allbirdmorph_missing <- allbirdmorph |> 
  select(species, islandfraction_hbw, land_status_beac, isolation_index,
         centroid_x, centroid_y, ext_min_x, ext_min_y, ext_max_x, ext_max_y,
         population_trend, x2020_iucn_red_list_category_hbw) |> 
  filter(is.na(centroid_x)) |> 
  select(-c(centroid_x, centroid_y)) |> 
  mutate(country = NA) |> 
  st_sf(geom = st_sfc(st_point(), crs = 3857)) |> 
  rename(geometry = geom)

allbirdmorph3 <- rbind(allbirdmorph_countries, allbirdmorph_closest,
                       allbirdmorph_missing) |> 
  rename_with(~ifelse(.x %in% c("species", "geometry"), .x, paste0(.x, "_allbirdmorph")))

# Do a similar thing with the AVONET data
avonet2 <- avonet |> 
  select(species, family3, order3, species_status, habitat, habitat_density,
         min_latitude, max_latitude, centroid_latitude, centroid_longitude,
         range_size, migration) |> 
  mutate(across(c(centroid_longitude, centroid_latitude), as.numeric)) |> 
  filter(!is.na(centroid_longitude)) |> 
  st_as_sf(coords = c("centroid_longitude", "centroid_latitude"), crs = 4326) |> 
  st_transform(3857)

avonet_countries <- avonet2 |> 
  st_intersection(world)

avonet_closest <- avonet2 |> 
  filter(!species %in% avonet_countries$species)

avonet_closest$country <- world[st_nearest_feature(avonet_closest, world), ]$country

avonet_missing <- avonet |> 
  select(species, family3, order3, species_status, habitat, habitat_density,
         min_latitude, max_latitude, centroid_latitude, centroid_longitude,
         range_size, migration) |> 
  mutate(across(c(centroid_longitude, centroid_latitude), as.numeric)) |> 
  filter(is.na(centroid_longitude)) |> 
  select(-c(centroid_latitude, centroid_longitude)) |> 
  mutate(country = NA) |> 
  st_sf(geom = st_sfc(st_point(), crs = 3857)) |> 
  rename(geometry = geom)

avonet3 <- rbind(avonet_countries, avonet_closest, avonet_missing) |> 
  rename_with(~ifelse(.x %in% c("species", "geometry"), .x, paste0(.x, "_avonet")))

# Need a column from the passglob object
passglob2 <- passglob |> 
  select(species, generation_length_yrs_birdlife_database) |> 
  distinct(species)

# Build polygons for each bird
avonet2_range <- do.call(rbind, lapply(1:nrow(avonet2), function(x) {
  y <- avonet2[x, ]
  y_min <- st_sfc(st_point(as.numeric(c(st_coordinates(y)[, "X"], y$min_latitude))), crs = 4326)
  y_max <- st_sfc(st_point(as.numeric(c(st_coordinates(y)[, "X"], y$max_latitude))), crs = 4326)
  y <- st_transform(y, 3857)
  y_min <- st_transform(y_min, 3857)
  y_max <- st_transform(y_max, 3857)
  
  # Build an ellipse of the range - A = pi * r1 * r2. Solve for r2,
  # get r2 = A/(pi * r1)
  range_area <- units::set_units(as.numeric(y$range_size), km^2)
  ey <- st_distance(y_min, y_max) / 2
  ex <- (range_area / (pi * ey)) |> 
    units::set_units(m) |> 
    as.numeric()
  
  y_round <- st_ellipse(y, ex = ex, ey = as.numeric(ey), res = 100) |> 
    st_set_crs(3857)
  st_geometry(y) <- y_round
  return(y)
  
}))
```

Okay. Let's try merging everything together:

```{r}

data_merge <- left_join(avonet3, st_drop_geometry(allbirdmorph3)) |> 
  left_join(passglob2) |> 
  select(-c(min_latitude_avonet, max_latitude_avonet, ext_min_x_allbirdmorph,
            ext_min_y_allbirdmorph, ext_max_x_allbirdmorph,
            ext_max_y_allbirdmorph)) |> 
  select(sort(tidyselect::peek_vars())) |> 
  relocate(species, family3_avonet, order3_avonet) |> 
  relocate(geometry, .after = last_col())
  

write.csv(data_merge, "./data/data_merge.csv")
```
